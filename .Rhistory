.libPaths()
?import
devtools::document()
library(roxygen2)
devtools::document()
roxygen2::roxygenize()
?*
?'*'
??multiply
??magrittr
devtools::document()
devtools::document()
??hour
?hour
search()
??hablar
.GlobalEnv
search()
??na.omit
??unique
?unique
x <- c(3:5, 11:8, 8 + 0:5, NA)
base::unique(x)
data.table::unique(x)
devtools::document()
rm(list = ls())
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
drop.by.subset <- NULL
subset.by.col <- "somecolumn"
# check inputs
if (!is.null(subset.by.col) &&
(!(drop.by.subset == FALSE) |
drop.by.subset == TRUE)) {
stop("Error: If subset.by.col is specified,
drop.by.subset must be either
TRUE (remove rows before binning) or
FALSE (set rows to NA before binning).")
}
# check inputs
if (!is.null(subset.by.col) &&
(!is.logical(drop.by.subset)) {
stop("Error: If subset.by.col is specified,
drop.by.subset must be either
TRUE (remove rows before binning) or
FALSE (set rows to NA before binning).")
}
# check inputs
if (!is.null(subset.by.col) &
(!is.logical(drop.by.subset))) {
stop("Error: If subset.by.col is specified,
drop.by.subset must be either
TRUE (remove rows before binning) or
FALSE (set rows to NA before binning).")
}
stop("If subset.by.col is specified,
drop.by.subset must be either
TRUE (remove rows before binning) or
FALSE (set rows to NA before binning).")
drop.by.subset <- FALSE
# check inputs
if (!is.null(subset.by.col) &
(!is.logical(drop.by.subset))) {
stop("If subset.by.col is specified,
drop.by.subset must be either
TRUE (remove rows before binning) or
FALSE (set rows to NA before binning).")
}
drop.by.subset <- TRUE
# check inputs
if (!is.null(subset.by.col) &
(!is.logical(drop.by.subset))) {
stop("If subset.by.col is specified,
drop.by.subset must be either
TRUE (remove rows before binning) or
FALSE (set rows to NA before binning).")
}
drop.by.subset <- NA
# check inputs
if (!is.null(subset.by.col) &
(!is.logical(drop.by.subset))) {
stop("If subset.by.col is specified,
drop.by.subset must be either
TRUE (remove rows before binning) or
FALSE (set rows to NA before binning).")
}
is.logical(drop.by.subset)
# check inputs
if (!is.null(subset.by.col) &
!(drop.by.subset == TRUE |
drop.by.subset == FALSE)) {
stop("If subset.by.col is specified,
drop.by.subset must be either
TRUE (remove rows before binning) or
FALSE (set rows to NA before binning).")
}
# check inputs
if (!is.null(subset.by.col) &
!(isTRUE(drop.by.subset) |
isFALSE(drop.by.subset))) {
stop("If subset.by.col is specified,
drop.by.subset must be either
TRUE (remove rows before binning) or
FALSE (set rows to NA before binning).")
}
subset.by.col <- TRUE
# check inputs
if (!is.null(subset.by.col) &
!(isTRUE(drop.by.subset) |
isFALSE(drop.by.subset))) {
stop("If subset.by.col is specified,
drop.by.subset must be either
TRUE (remove rows before binning) or
FALSE (set rows to NA before binning).")
}
isTRUE(drop.by.subset)
subset.by.col <- "somecolumn"
drop.by.subset <- TRUE
# check inputs
if (!is.null(subset.by.col) &
!(isTRUE(drop.by.subset) |
isFALSE(drop.by.subset))) {
stop("If subset.by.col is specified,
drop.by.subset must be either
TRUE (remove rows before binning) or
FALSE (set rows to NA before binning).")
}
drop.by.subset <- FALSE
# check inputs
if (!is.null(subset.by.col) &
!(isTRUE(drop.by.subset) |
isFALSE(drop.by.subset))) {
stop("If subset.by.col is specified,
drop.by.subset must be either
TRUE (remove rows before binning) or
FALSE (set rows to NA before binning).")
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
chr(13)
chr(13)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?person
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?devtools::document
?devtools::document
devtools::document()
devtools::document()
devtools::document()
