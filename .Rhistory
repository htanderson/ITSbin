write.centiseconds = FALSE,
write.seconds = TRUE)
ITS_to_seconds(ITS.dir = "Z:/16_Anderson_LENA/LENAdata/XX_testingPackage/jennym_error/ITS_files/",
CSV.dir = "Z:/16_Anderson_LENA/LENAdata/XX_testingPackage/jennym_error/",
time.zone = "America/Los_Angeles",
write.recordings = FALSE,
write.blocks = TRUE,
write.segments = TRUE,
write.centiseconds = FALSE,
write.seconds = TRUE)
ITS_to_seconds(ITS.dir = "Z:/16_Anderson_LENA/LENAdata/XX_testingPackage/jennym_error/ITS_files/",
CSV.dir = "Z:/16_Anderson_LENA/LENAdata/XX_testingPackage/jennym_error/",
time.zone = "America/Los_Angeles",
write.recordings = FALSE,
write.blocks = TRUE,
write.segments = TRUE,
write.centiseconds = FALSE,
write.seconds = TRUE)
ITS_to_seconds(ITS.dir = "Z:/16_Anderson_LENA/LENAdata/XX_testingPackage/jennym_error/ITS_files/",
CSV.dir = "Z:/16_Anderson_LENA/LENAdata/XX_testingPackage/jennym_error/",
time.zone = Sys.timezone(),
# write.recordings = FALSE,
write.blocks = T)
?type.convert
sessionInfo()
devtools::document()
source('D:/Dropbox/_HeatherAnderson/4_ITSpackage_code/ITSbin/R/ITS_to_seconds.R', encoding = 'UTF-8')
ITS_to_seconds(ITS.dir = "Z:/16_Anderson_LENA/LENAdata/XX_testingPackage/jennym_error/ITS_files/",
CSV.dir = "Z:/16_Anderson_LENA/LENAdata/XX_testingPackage/jennym_error/",
time.zone = Sys.timezone(),
# write.recordings = FALSE,
write.blocks = T)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?ITSbin
??ITSbin
devtools::document()
devtools::document()
source('D:/Dropbox/_HeatherAnderson/4_ITSpackage_code/ITSbin/R/ITS_to_seconds.R', encoding = 'UTF-8')
if (is.null(time.zone)) {
stop(
"time.zone must be specified. If your .its file timezone is the same as your computerâ€™s current system timezone, use time.zone = Sys.timezone(). If your .its file(s) was/were collected using another time zone, run OlsonNames() for options and select the region that matches your .its file(s)."
)
}
#### setup directories to store output ####
### add forward slash to directory names if missing
input.dirs <-
list("ITS.dir" = ITS.dir,
"CSV.dir" = CSV.dir)
endForwardSlash <-
# to maintain names, must pass
# names and objects separately
function(input.dir, nam) {
# if directory name doesn't
# end in forward slash
# add it
if (!endsWith(x = input.dir, suffix = "/")) {
assign(x = nam,
value = paste0(input.dir, "/"),
inherits = TRUE)
}
}
# use purrr::walk as for-loop/lapply substitute
# with no output
purrr::walk(.x = names(input.dirs),
.f = function(n) endForwardSlash(input.dirs[[n]], n))
rm(endForwardSlash)
### create directories for desired outputs  ###
# list of all possible outputs
list.to.write <-
list("write.recordings" = write.recordings,
"write.blocks" = write.blocks,
"write.segments" = write.segments,
"write.centiseconds" = write.centiseconds,
"write.seconds" = write.seconds)
# limit to only desired outputs
list.to.write <-
list.to.write[list.to.write == TRUE]
# get names of folders by dropping "write."
folder.names <-
names(list.to.write) %>%
{substr(., 7, nchar(.))}
# function to create sub-folders
create.folders <-
function(folder.name) {
dir.to.create <-
paste0(CSV.dir, folder.name, "/")
dir.create(dir.to.create, showWarnings = FALSE)
}
# use purrr::walk as for-loop/lapply substitute
# with no output
purrr::walk(.x = folder.names,
.f = create.folders)
# keep track of number completed
ITSfileNum <- 0
##### Helper Functions #####
# Remove characters from columns with time data
# EG startTime="PT17239.26S" --> 17239.26 &
# startClockTime="2017-03-28T14:06:55Z" --> 2017-03-2814:06:55
dropChars <- function(x){
gsub(x,
pattern = "[^0-9.:-]",
replacement = "")
}
### add unique ids to recs, blks, segs ###
# CODE BLOCK FROM TJ Mahr:
# https://github.com/HomeBankCode/rlena
# NESTED FUNCTION (originally for-loop)
# Add recording id, block id, and segment id
# to all annotation nodes.
# These ids can later serve as foreign keys
# for join operations etc.
add_id_attrs <- function(its_xml) {
# start id counts at 0
r <- 0
b <- 0
s <- 0
# grab all recording nodes
recording.nodes <-
xml2::xml_find_all(
its_xml,
xpath = "//ProcessingUnit/Recording")
# function
extractRecordings <-
function(rec) {
# increase r by 1
assign(x = "r",
value = r + 1,
inherits = TRUE)
xml2::xml_set_attr(rec, "num", NULL)
xml2::xml_set_attr(rec, "recId", r)
# grab blocks within recording r
blocks <-
xml2::xml_children(recording.nodes[r])
extractBlocks <-
function(blk) {
# iterate b
assign(x = "b",
value = b + 1,
inherits = TRUE)
# blkTypeId: running count of Pauses / Conv.
blkTypeId <-
xml2::xml_attr(blk, "num")
blkType <- xml2::xml_name(blk)
xml2::xml_set_attr(blk, "recId", r)
xml2::xml_set_attr(blk, "blkId", b)
xml2::xml_set_attr(blk, "blkTypeId", blkTypeId)
xml2::xml_set_attr(blk, "num", NULL)
xml2::xml_set_attr(blk, "blkType", blkType)
# grab all segments within block
segments <- xml2::xml_children(blk)
extractSegments <-
function(seg) {
# iterate s
assign(x = "s",
value = s + 1,
inherits = TRUE)
# set attributes to match parent block
xml2::xml_set_attr(seg, "recId", r)
xml2::xml_set_attr(seg, "blkId", b)
xml2::xml_set_attr(seg, "blkTypeId", blkTypeId)
xml2::xml_set_attr(seg, "segId", s)
xml2::xml_set_attr(seg, "blkType", blkType)
}
purrr::walk(
.x = segments,
.f = extractSegments)
}
purrr::walk(
.x = blocks,
.f = extractBlocks)
}
purrr::walk(
.x = recording.nodes,
.f = extractRecordings)
}
# END CODE BLOCK FROM TJ Mahr
### seg to csec functions ###
## most frequent value, na's removed ##
# of charater type
stat_mode_narm <-
function(x) {
x <- na.omit(x)
ux <- unique(x)
mode_loc <-
which.max(
tabulate(
match(x, ux)))
return(ux[mode_loc])
}
## most frequent value, na's retained ##
# of charater type
stat_mode_na <-
function(x) {
ux <- unique(x)
freq <- tabulate(
match(x, ux))
mode_loc <-
which.max(freq)
return(ux[mode_loc])
}
## most frequent speaker ##
# if tie, paste with "."
speaker.freq <-
function(x){
ux <- unique(x)
freq <- tabulate(
match(x, ux))
if (all(freq == 50)) {
return(
paste(ux[1], ux[2],
sep = "."))
} else {
mode_loc <-
which.max(freq)
return(
ux[mode_loc])
}
}
### End function for file ###
completeFile <- function() {
if (any(validation[, !"subjID"] != TRUE)) {
message(subjID, " failed at least 1 validation check.
Script may not have run correctly.")
}
# assign to global environment in case
# function ended early
assign(x = "validation.allfiles",
value =
.rbind.data.table(validation.allfiles,
validation,
fill = TRUE),
envir = .GlobalEnv)
# write after every file in case crash
fwrite(x = validation.allfiles,
file = paste0(CSV.dir,
"ITS_script_validation_inprogress.csv"))
# assign to global environment in case
# function ended early
assign(x = "ITS.checks.allfiles",
value =
.rbind.data.table(ITS.checks.allfiles,
ITS.checks,
fill = TRUE),
envir = .GlobalEnv)
# write after every file in case crash
fwrite(x = ITS.checks.allfiles,
file = paste0(CSV.dir,
"ITS_file_checks_inprogress.csv"))
# track completed processing
# assign to global environment in case
# function ended early
assign(x = "processing.completed.allfiles",
value =
.rbind.data.table(processing.completed.allfiles,
processing.completed,
fill = TRUE),
envir = .GlobalEnv)
# write after every file in case crash
fwrite(x = processing.completed.allfiles,
file = paste0(CSV.dir,
"processing_completed_inprogress.csv"))
functionEndTime <- Sys.time()
message("
Finished file ", ITSfileNum, "/", length(ITS.files),
" ", subjID, " at ", functionEndTime)
timeToRun <- round(functionEndTime - functionStartTime, 2)
message(
"Time to process ITS: ", timeToRun, attr(timeToRun, "units"), "
")
}
### end helper functions
# create DTs to store all checks
assign(x = "validation.allfiles",
value = data.table(),
envir = .GlobalEnv)
assign(x = "ITS.checks.allfiles",
value = data.table(),
envir = .GlobalEnv)
assign(x = "processing.completed.allfiles",
value = data.table(),
envir = .GlobalEnv)
# list of ITS files to iterate over
ITS.files <-
dir(path = ITS.dir, pattern = ".its")
devtools::document()
install.packages("pkgdown")
install.packages("pkgdown")
usethis::use_pkgdown()
pkgdown::build_site()
install.packages(c("rlang", "xml2"))
install.packages(c("rlang", "xml2"))
install.packages(c("rlang", "xml2"))
install.packages(c("rlang", "xml2"))
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site()
?devtools::document
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
read.csv("data/Blocks_ColumnNames.csv")
est <- read.csv("data/Blocks_ColumnNames.csv")
View(est)
est <- read.csv("data/Blocks_ColumnNames.csv")
library(ITSbin)
usethis::use_vignette("bin_seconds-options")
getwd()
getwd()
usethis::use_vignette("bin_seconds-options")
60*3
library(ITSbin)
jpeg("useroptions_midnightseqCRTRUE.jpg")
jpeg("useroptions_midnightseqCRTRUE.jpg")
?jpeg
library(jpeg)
pp <- readJPEG("useroptions_midnightseqCRTRUE.jpg")
plot.new()
rasterImage(pp,0,0,1,1)
plot.new()
rasterImage(pp,0,0,1,1)
?rasterImage
plot.new()
rasterImage(pp,0,0,0,0)
plot.new()
rasterImage(pp,1,1,1,1)
plot.new()
rasterImage(pp,0,0,1,1)
plot.new()
rasterImage(pp,0,0,2,2)
plot.new()
rasterImage(pp,0,0,1,1)
plot.new()
rasterImage(pp,0.5,0.5,1,1)
plot.new()
rasterImage(pp,-0.5,-0.5,1,1)
plot.new()
rasterImage(pp,-0.1,-0.1,1,1)
plot.new()
rasterImage(pp,0.1,0.1,1,1)
plot.new()
rasterImage(pp,-0.3,-0.3,1,1)
plot.new()
rasterImage(pp,-0.2,-0.2,1,1)
plot.new()
rasterImage(pp,-0.15,-0.15,1,1)
plot.new()
rasterImage(pp,0,0,1,1)
library(ITSbin)
library(jpeg)
readJPEG("useroptions_midnightseqCRTRUE.jpg")
plot.new()
rasterImage(pp)
plot.new()
rasterImage(pp,,,,)
plot.new()
rasterImage(pp,1,,1,)
plot.new()
rasterImage(pp,0,,1,)
plot.new()
rasterImage(pp,0,,,)
23+15
38+15
8:23:19.00 + 3:00:00.00
lubridate::hms(8:23:19.00) + lubridate::hms(3:00:00.00)
lubridate::hms("8:23:19.00") + lubridate::hms("3:00:00.00")
lubridate::hms("8:23:19.00") + lubridate::hms("2:59:59.99")
lubridate::hms("11:23:19.00") + lubridate::hms("3:00:00.00")
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
library(ITSbin)
cite("ITSbin")
citation("ITSbin")
usethis::use_mit_license()
?usethis::use_mit_license
?find_name
??find_name
usethis::use_mit_license(name = "Heather T. Anderson")
usethis::use_mit_license(name = c("Heather T. Anderson", "Caitlin M. Fausey"))
usethis::use_mit_license(name = c("Heather T. Anderson", "Caitlin M. Fausey"))
usethis::use_mit_license(name = "Heather T. Anderson")
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
?devtools::document
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
library(ITSbin)
citation("ITSbin")
library(ITSbin)
citation("ITSbin")
devtools::document()
library(ITSbin)
citation("ITSbin")
library(ITSbin)
citation("ITSbin")
devtools::document()
library(ITSbin)
citation("ITSbin")
devtools::document()
library(ITSbin)
citation("ITSbin")
library(ITSbin)
devtools::document()
library(ITSbin)
citation("ITSbin")
720*3
13*60
13*60*60
14*60*60
15*60*60
library(ITSbin)
vignette("bin_seconds-options", package = "ITSbin")
devtools::document()
devtools::build_vignettes()
devtools::document()
library(ITSbin)
vignette("bin_seconds-options", package = "ITSbin")
vignette(package = "ITSbin")
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
install.packages(c("testthat", "usethis"))
install.packages(c("testthat", "usethis"))
install.packages(c("testthat", "usethis"))
devtools::build_vignettes()
library(ITSbin)
devtools::build_vignettes()
install.packages("devtools")
devtools::build_vignettes()
library(ITSbin)
vignette(package = "ITSbin")
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
library(ITSbin)
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
library(ITSbin)
citation("ITSbin")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
source('D:/Dropbox/_HeatherAnderson/4_ITSpackage_code/ITSbin/R/bin_seconds.R')
library(ITSbin)
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_site()
devtools::document()
devtools::build_site()
devtools::build_site()
devtools::document
devtools::document()
devtools::build_site()
devtools::document()
devtools::build_site()
devtools::build_site()
devtools::document()
devtools::build_site()
vignette("bin_seconds-options", package = "ITSbin")
devtools::build()
devtools::build_site()
.libPaths()
